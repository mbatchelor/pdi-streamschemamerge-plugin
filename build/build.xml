<?xml version="1.0"?>
<project name="pdi-streamschemamerge-plugin" default="dist" basedir="..">
	<description>
        Build file for a PDI step plugin
    </description>

	<!-- you can use this file to set the kettle-dir property or change it directly below -->
	<property file="build/build.properties" />

	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="classes" location="classes" />
	<property name="dist" location="dist" />
    <property name="diststepdir" location="${dist}/steps" />
    <property name="pluginname" value="StreamSchemaStep" />
    <property name="diststep" location="${diststepdir}/${pluginname}" />
	<property name="jarfilename" value="stream-schema-merge-step.jar" />

	<!-- used to compile code -->
	<path id="compile.classpath">
		<fileset dir="${basedir}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

    <!-- used for tests-->
    <path id="test.classpath">
        <fileset dir="${basedir}/lib">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${basedir}/test-lib">
            <include name="**/*.jar" />
        </fileset>
        <fileset dir="${diststep}">
            <include name="**/*.jar" />
        </fileset>
        <pathelement path="${testclasses.dir}"/>
    </path>

	<target name="init">
		<tstamp />
	</target>

    <target name="compile" depends="init" description="compile the source ">
        <mkdir dir="${classes}" />
        <javac source="${javac.source}" target="${javac.target}" srcdir="${src}" destdir="${classes}" debuglevel="lines,vars,source" debug="true">
            <classpath refid="compile.classpath" />

        </javac>
    </target>

	<target name="dist" depends="compile" description="generate the distribution">

		<mkdir dir="${diststep}" />

		<!-- jar things up, also add the properties files (messages) and the icon -->
		<copy todir="${classes}">
			<fileset dir="${src}" includes="**/*.properties" />
			<fileset dir="${src}" includes="**/*.png" />
		</copy>

		<!-- jar class up -->
		<jar jarfile="${diststep}/${jarfilename}" basedir="${classes}"/>

        <!-- move version file to dist folder-->
        <copy todir="${diststep}">
            <fileset dir="${basedir}" includes="version.xml" />
        </copy>

        <!-- zip folder for distribution-->
        <zip destfile="${diststepdir}/${pluginname}.zip">
            <zipfileset dir="${diststep}" prefix="${pluginname}/"/>
        </zip>

	</target>
	
	<target name="install" depends="dist" description="compile and install into local PDI installation">
		
		<echo message="Looking for local PDI installation in ${kettle-dir}"/>
		
		<!-- change these to adapt to your environment -->
		<property name="kettle-dir" location="your_kettle_5.x_dir_here" />
		<available file="${kettle-dir}" type="dir" property="kettle-dir.present" />

		<fail unless="kettle-dir.present" message="PDI installation not found. Please specify the path to your PDI installation in build/build.properties" />
		
		<!-- remove previous installations -->
		<delete dir="${kettle-dir}/plugins/steps/${pluginname}" />

		<!-- put fresh files in place -->
		<mkdir dir="${kettle-dir}/plugins/steps/${pluginname}" />

		<copy todir="${kettle-dir}/plugins/steps/${pluginname}">
			<fileset dir="${diststep}" includes="**/*.*" />
			<fileset dir="${diststep}" includes="**" />
		</copy>
		
		
		<echo message="Installed the plugin in PDI. To test, please restart Spoon."/>
		
	</target>

	<target name="clean" description="clean up">
		<delete dir="${classes}" />
		<delete dir="${dist}" />
	</target>

    <!--=======================================================================
      test

      Compiles and runs all the tests for the project
      ====================================================================-->
    <target name="test" depends="compile,compile-tests, init-test-reports" description="Compiles and runs unit tests">
        <junit maxmemory="${junit.maxmemory}"
               fork="${fork}"
               forkmode="${junit.forkmode}"
               failureProperty="test.failed"
               haltonfailure="${junit.haltonfailure}"
               haltonerror="${junit.haltonerror}"
               printsummary="yes">
            <sysproperty key="java.awt.headless" value="${headless.unittest}"/>

            <syspropertyset>
                <propertyref prefix="junit.sysprop."/>
                <mapper type="glob" from="junit.sysprop.*" to="*"/>
            </syspropertyset>

            <classpath refid="test.classpath"/>
            <formatter type="xml"/>
            <test name="${testcase}" todir="${testreports.xml.dir}"/>
        </junit>

        <junitreport todir="${testreports.html.dir}">
            <fileset dir="${testreports.xml.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${testreports.html.dir}"/>
        </junitreport>
    </target>


    <!--=======================================================================
      clean-test-reports

      Remove all xml and html JUnit test reports
      ====================================================================-->
    <target name="clean-test-reports">
        <delete dir="${testreports.xml.dir}"/>
        <delete dir="${testreports.html.dir}"/>
    </target>


    <!--=======================================================================
      init-test-reports

      Prepare directories for JUnit test reports
      ====================================================================-->
    <target name="init-test-reports" depends="clean-test-reports">
        <mkdir dir="${testreports.xml.dir}"/>
        <mkdir dir="${testreports.html.dir}"/>
    </target>

    <!--=======================================================================
      compile-tests

      Compiles project test source
      ====================================================================-->
    <target name="compile-tests" depends="init-tests">
        <javac destdir="${testclasses.dir}"
               debug="true"
               optimize="false"
               source="${javac.source}"
               target="${javac.target}"
               fork="true"
               encoding="UTF-8">
            <src path="${testsrc.dir}"/>
            <classpath refid="test.classpath"/>
        </javac>

        <!-- Copy the non-java files from the source directory to the test classes directory -->
        <copy todir="${testclasses.dir}">
            <fileset dir="${testsrc.dir}">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>

    <!--=======================================================================
      clean-tests

      Removes all files related to tests
      ====================================================================-->
    <target name="clean-tests">
        <delete dir="${testbin.dir}"/>
    </target>


    <!--=======================================================================
        init-tests

        Compiles project test source
        ====================================================================-->
    <target name="init-tests" depends="clean-tests">
        <mkdir dir="${testclasses.dir}"/>
        <mkdir dir="${testsrc.dir}"/>
        <!-- Sonar will fail if no src or classes dir -->
        <mkdir dir="${src}"/>
        <mkdir dir="${classes}"/>
    </target>

    <target name="dist-test" depends="test,dist" description="Run tests and then create dist">

    </target>

</project>
